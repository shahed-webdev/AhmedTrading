@using AhmedTrading.Repository
@model TraderDetailsModel
@{
    ViewBag.Title = "Products Share";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="m-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h4 class="page-header">Share Product</h4>
            <a class="blue-text" href="/TradeSharing/Payments/@Model.TraderId">Go To Share Payment <i class="far fa-long-arrow-right"></i></a>
        </div>
        <div>
            <h4 class="page-header on-print mb-1"><i class="far fa-store"></i> @Model.TraderName</h4>
            <p class="mb-0"><i class="far fa-phone"></i> @Model.Phone</p>
        </div>
    </div>

    <section class="mb-4">
        <div class="row">
            <div class="col-xl-3 col-lg-6 mb-4">
                <div class="media white z-depth-1 rounded">
                    <i class="fas fa-shopping-bag fa-lg  indigo z-depth-1 p-4 rounded-left text-white mr-3"></i>
                    <div class="media-body p-1">
                        <p class="text-uppercase text-muted mb-1"><small>Given Product</small></p>
                        <h5 class="font-weight-bold mb-0">@Model.GivenProductPrice.ToString("F")</h5>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 mb-4">
                <div class="media white z-depth-1 rounded">
                    <i class="fas fa-shopping-bag fa-lg red lighten-1 darken-1 z-depth-1 p-4 rounded-left text-white mr-3"></i>
                    <div class="media-body p-1">
                        <p class="text-uppercase text-muted mb-1"><small>Taken Product</small></p>
                        <h5 class="font-weight-bold mb-0">@Model.TakenProductPrice.ToString("F")</h5>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 mb-4">
                <div class="media white z-depth-1 rounded">
                    <i class="far fa-money-bill-alt fa-lg light-green z-depth-1 p-4 rounded-left text-white mr-3"></i>
                    <div class="media-body p-1">
                        <p class="text-uppercase text-muted mb-1"><small>Given Amount</small></p>
                        <h5 id="setSold" class="font-weight-bold mb-0">@Model.GivenAmount.ToString("F")</h5>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-lg-6 mb-4">
                <div class="media white z-depth-1 rounded">
                    <i class="fas fa-money-bill-alt fa-lg pink darken-1 z-depth-1 p-4 rounded-left text-white mr-3"></i>
                    <div class="media-body p-1">
                        <p class="text-uppercase text-muted mb-1"><small>Taken Amount</small></p>
                        <h5 id="setDiscount" class="font-weight-bold mb-0">@Model.TakenAmount.ToString("F")</h5>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="card card-body">
        <h4 class="page-header mb-3">NET Amount: ৳@Model.NetAmount.ToString("F")</h4>

        <div class="btn-group btn-group-toggle mb-3" data-toggle="buttons">
            <label class="btn btn-indigo form-check-label active">
                <input class="form-check-input" type="radio" value="false" name="IsGiven" autocomplete="off" checked> Take Product
            </label>
            <label class="btn btn-indigo form-check-label">
                <input class="form-check-input" type="radio" value="true" name="IsGiven" autocomplete="off"> Give Product
            </label>
        </div>

        <h5 class="mt-3 mb-0"><strong id="eventTitle">Take Product From</strong>: @Model.TraderName</h5>

        <div class="mb-3">
            <form id="formAdd">
                <span id="responseError"></span>
                <div class="row align-items-center">
                    <div class="col-lg-3">
                        <div class="md-form">
                            <label for="inputProductId">Product</label>
                            <input id="inputProductId" autocomplete="off" type="text" class="form-control" required />
                            <input id="hiddenProductId" type="hidden" />
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="md-form">
                            <label for="inputQuantity">Quantity</label>
                            <input id="inputQuantity" type="number" step="0.01" min="0" class="form-control" required />
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="md-form">
                            <label for="inputUnitPrice">Unit Price</label>
                            <input id="inputUnitPrice" type="number" step="0.01" min="0" class="form-control" required />
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="md-form input-group">
                            <input id="inputShareDate" type="text" class="form-control datepicker" required />
                            <div class="input-group-append">
                                <button class="btn btn-md btn-indigo m-0 px-3" type="submit">Save</button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>

        <table id="give-table" class="data-table table table-sm table-bordered">
            <thead>
                <tr>
                    <th><strong>Product Name</strong></th>
                    <th><strong>Quantity</strong></th>
                    <th><strong>Unit Price</strong></th>
                    <th><strong>Share Price</strong></th>
                    <th><strong>Share Date</strong></th>
                    <th style="width: 80px"><strong>Delete</strong></th>
                </tr>
            </thead>
        </table>
    </div>
</div>


@section Scripts {
    <script>
        $(function() {
            $('.datepicker').pickadate().val(moment(new Date()).format('DD MMMM, YYYY'));

            dataTable.filter = [
                { Field: "TraderId", Value: @Model.TraderId, Operand: "==" },
                { Field: "IsGiven", Value: false, Operand: "==" }
            ];
            dataTable.getData();
        });

        var dataTable = {
            table: null,
            filter: null,
            init: function() {
                dataTable.table = $("#give-table").DataTable({
                    processing: true,
                    serverSide: true,
                    dom: '<"row"<"col-sm-6"Bl><"col-sm-6"f>><"row"<"col-sm-12"<tr>>><"row"<"col-sm-5"i><"col-sm-7"p>>',
                    buttons: dataTable.button,
                    ajax: {
                        url: "/TradeSharing/GiveDataTable",
                        type: "POST",
                        data: function(d) {
                            d.filters = dataTable.filter;
                        }
                    },
                    columns:
                    [
                        { data: "ProductName" },
                        { data: "Quantity" },
                        { data: "UnitPrice" },
                        { data: "SharePrice" },
                        { data: "ShareDate", "render": function(data) { return moment(data).format('DD MMM YYYY') } },
                        {
                            data: "TraderSharingId", "render": function(data, type, row, meta) {
                                return `<a class="delete far fa-trash-alt" data-url="/TradeSharing/DeleteSharedProduct/${data}"></a>`
                            }
                        }
                    ],
                    columnDefs: [
                        { 'searchable': false, 'targets': [5] },
                        { 'sortable': false, 'targets': [5] },
                        { 'className': "text-left", "targets": [0] }
                    ]
                });
            },
            getData: function() {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            },
            addSign: function(data) { return `${data}/-` },
            button: {
                buttons: [{
                    extend: 'print',
                    text: '<i class="fa fa-print"></i> Print',
                    title: '',
                    exportOptions: {
                        //columns: [0,1] //Column value those print
                                                                                                                                                                                                                                                                                                                                                                                                                },
                    customize: function(win) {
                        $(win.document.body).prepend(`<nav class="mb-3 navbar blue-bg">${$('#printBrand').html()}</nav><h3 class="h3-responsive">${$('.on-print').text()}</h3>`);
                    },
                    autoPrint: true
                }],
                dom: {
                    button: {
                        className: 'btn btn-dark btn-rounded btn-sm my-0'
                    }
                }
            }
        }

        //selectors
        const formAdd = document.getElementById("formAdd");
        const responseError = document.getElementById("responseError");
        const hiddenProductId = formAdd.hiddenProductId;
        const IsGiven = $('input:radio[name="IsGiven"]');
        const table = document.getElementById("give-table");

        IsGiven.change(function() {
            dataTable.filter = [{ Field: "TraderId", Value: @Model.TraderId, Operand: "==" },{ Field: "IsGiven", Value: $(this).val(), Operand: "==" }];
            dataTable.getData();

            $("#eventTitle").text($(this).val() === "true" ? "Give Product From": "Take Product From");
        });

        //event
        formAdd.addEventListener('submit', function(evt) {
            evt.preventDefault();
            responseError.textContent = "";

            if (!hiddenProductId.value) {
                return;
            }

            const data = {
                TraderId: @Model.TraderId,
                ProductId: +hiddenProductId.value,
                Quantity: +this.inputQuantity.value,
                UnitPrice: +this.inputUnitPrice.value,
                IsGiven: $('input:radio[name="IsGiven"]:checked').val(),
                ShareDate: inputShareDate.value
            };

            const url = '/TradeSharing/ShareProduct';
            $.ajax({
                type: "POST",
                url,
                data,
                success: function(response) {
                    if (response.IsSuccess) {
                        location.reload();
                    } else {
                        responseError.textContent = response.Message;
                    }
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });

        //on delete
        table.addEventListener('click', function(evt) {
            const onDelete = evt.target.classList.contains("delete");
            if (onDelete) {
                const url = evt.target.getAttribute("data-url");
                if (!url) return;

                const isConfirm = confirm("Are you sure you want to delete?");
                if (!isConfirm) return;

                axios.get(url).then(res => {
                    if (res.data)
                        location.reload();
                }).catch(err => console.log(err));
            }
        });

        //product autocomplete
        hiddenProductId.value = "";

        $('#inputProductId').typeahead({
            minLength: 1,
            displayText: function(item) {
                return item.ProductName;
            },
            afterSelect: function(item) {
                this.$element[0].value = item.ProductName;
            },
            source: function(request, result) {
                $.ajax({
                    url: "/Product/FindProductsByName",
                    data: { name: request },
                    success: function(response) { result(response); },
                    error: function(err) { console.log(err) }
                });
            },
            updater: function(item) {
                hiddenProductId.value = item.ProductId;
                return item;
            }
        });
    </script>
}
