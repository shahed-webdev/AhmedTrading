// <auto-generated />
using System;
using AhmedTrading.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AhmedTrading.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200902051432_AddPersonalLoanTables")]
    partial class AddPersonalLoanTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AhmedTrading.Data.Advance", b =>
                {
                    b.Property<int>("AdvanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdvanceAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("AdvanceDate")
                        .HasColumnType("date");

                    b.Property<string>("AdvanceFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AdvanceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TimePeriod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AdvanceId");

                    b.ToTable("Advance");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankAccountId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankDeposit", b =>
                {
                    b.Property<int>("BankDepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("date");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankDepositId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankDeposit");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankLoan", b =>
                {
                    b.Property<int>("BankLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("InterestPercentage")
                        .HasColumnType("float");

                    b.Property<double>("LoanAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("date");

                    b.Property<string>("LoanDetails")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("LoanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<double>("RemainingAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([LoanAmount]-[ReturnAmount])");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.Property<string>("ReturnPeriod")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("BankLoanId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankLoan");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankLoanReturn", b =>
                {
                    b.Property<int>("BankLoanReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankLoanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("date");

                    b.HasKey("BankLoanReturnId");

                    b.HasIndex("BankLoanId");

                    b.ToTable("BankLoanReturn");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankWithdrew", b =>
                {
                    b.Property<int>("BankWithdrewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("date");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankWithdrewId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankWithdrew");
                });

            modelBuilder.Entity("AhmedTrading.Data.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<double>("Due")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(([OpeningDue]+[TotalAmount]+[ReturnAmount])-([TotalDiscount]+[Paid]))");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("OpeningDue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("float");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AhmedTrading.Data.CustomerPhone", b =>
                {
                    b.Property<int>("CustomerPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerPhoneId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhone");
                });

            modelBuilder.Entity("AhmedTrading.Data.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ExpenseAmount")
                        .HasColumnType("float");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpenseFor")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ExpensePaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("AhmedTrading.Data.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<double>("TotalExpense")
                        .HasColumnType("float");

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("AhmedTrading.Data.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("DialogTitle")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Established")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("InstitutionLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LocalArea")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("InstitutionId");

                    b.ToTable("Institution");

                    b.HasData(
                        new
                        {
                            InstitutionId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionName = "Institution"
                        });
                });

            modelBuilder.Entity("AhmedTrading.Data.PageLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("LinkId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("PageLink");
                });

            modelBuilder.Entity("AhmedTrading.Data.PageLinkAssign", b =>
                {
                    b.Property<int>("LinkAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("LinkAssignId");

                    b.HasIndex("LinkId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PageLinkAssign");
                });

            modelBuilder.Entity("AhmedTrading.Data.PageLinkCategory", b =>
                {
                    b.Property<int>("LinkCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("int");

                    b.HasKey("LinkCategoryId");

                    b.ToTable("PageLinkCategory");
                });

            modelBuilder.Entity("AhmedTrading.Data.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("AhmedTrading.Data.PersonalLoan", b =>
                {
                    b.Property<int>("PersonalLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("LoanAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("date");

                    b.Property<string>("LoanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<double>("RemainingAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([LoanAmount]-[ReturnAmount])");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.HasKey("PersonalLoanId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PersonalLoan");
                });

            modelBuilder.Entity("AhmedTrading.Data.PersonalLoanReturn", b =>
                {
                    b.Property<int>("PersonalLoanReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PersonalLoanId")
                        .HasColumnType("int");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("date");

                    b.HasKey("PersonalLoanReturnId");

                    b.HasIndex("PersonalLoanId");

                    b.ToTable("PersonalLoanReturn");
                });

            modelBuilder.Entity("AhmedTrading.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<double>("SellingUnitPrice")
                        .HasColumnType("float");

                    b.Property<double>("Stock")
                        .HasColumnType("float");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProductId");

                    b.HasIndex("ProductBrandId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("AhmedTrading.Data.ProductBrand", b =>
                {
                    b.Property<int>("ProductBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductBrandId");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("AhmedTrading.Data.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MemoNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("PurchaseDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("PurchaseDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(case when [PurchaseTotalPrice]=(0) then (0) else round(([PurchaseDiscountAmount]*(100))/[PurchaseTotalPrice],(2)) end)");

                    b.Property<double>("PurchaseDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(round(([PurchaseTotalPrice]+[PurchaseReturnAmount])-([PurchaseDiscountAmount]+[PurchasePaidAmount]),(2)))");

                    b.Property<double>("PurchasePaidAmount")
                        .HasColumnType("float");

                    b.Property<string>("PurchasePaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(4)")
                        .HasComputedColumnSql("(case when (([PurchaseTotalPrice]+[PurchaseReturnAmount])-([PurchaseDiscountAmount]+[PurchasePaidAmount]))<=(0) then 'Paid' else 'Due' end)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<double>("PurchaseReturnAmount")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseSn")
                        .HasColumnName("PurchaseSN")
                        .HasColumnType("int");

                    b.Property<double>("PurchaseTotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchaseList", b =>
                {
                    b.Property<int>("PurchaseListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([PurchaseQuantity]*[PurchaseUnitPrice])");

                    b.Property<double>("PurchaseQuantity")
                        .HasColumnType("float");

                    b.Property<double>("PurchaseUnitPrice")
                        .HasColumnType("float");

                    b.Property<double>("SellingUnitPrice")
                        .HasColumnType("float");

                    b.HasKey("PurchaseListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseList");
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchasePayment", b =>
                {
                    b.Property<int>("PurchasePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ReceiptSn")
                        .HasColumnName("ReceiptSN")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchasePayment");
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchasePaymentList", b =>
                {
                    b.Property<int>("PurchasePaymentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePaidAmount")
                        .HasColumnType("float");

                    b.Property<int>("PurchasePaymentId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentListId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchasePaymentId");

                    b.ToTable("PurchasePaymentList");
                });

            modelBuilder.Entity("AhmedTrading.Data.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DateofBirth")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NationalId")
                        .HasColumnName("NationalID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ps")
                        .HasColumnName("PS")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Validation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RegistrationId");

                    b.ToTable("Registration");

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Ps = "Admin_121",
                            Type = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("AhmedTrading.Data.Selling", b =>
                {
                    b.Property<int>("SellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SellingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("SellingDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("SellingDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(case when [SellingTotalPrice]=(0) then (0) else round(([SellingDiscountAmount]*(100))/[SellingTotalPrice],(2)) end)");

                    b.Property<double>("SellingDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(round(([SellingTotalPrice]+[SellingReturnAmount]+[TransportationCost])-([SellingDiscountAmount]+[SellingPaidAmount]),(2)))");

                    b.Property<double>("SellingPaidAmount")
                        .HasColumnType("float");

                    b.Property<string>("SellingPaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(4)")
                        .HasComputedColumnSql("(case when (([SellingTotalPrice]+[SellingReturnAmount]+[TransportationCost])-([SellingDiscountAmount]+[SellingPaidAmount]))<=(0) then 'Paid' else 'Due' end)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<double>("SellingReturnAmount")
                        .HasColumnType("float");

                    b.Property<int>("SellingSn")
                        .HasColumnName("SellingSN")
                        .HasColumnType("int");

                    b.Property<double>("SellingTotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("TransportationCost")
                        .HasColumnType("float");

                    b.HasKey("SellingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Selling");
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingList", b =>
                {
                    b.Property<int>("SellingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<double>("SellingPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([SellingQuantity]*[SellingUnitPrice])");

                    b.Property<double>("SellingQuantity")
                        .HasColumnType("float");

                    b.Property<double>("SellingUnitPrice")
                        .HasColumnType("float");

                    b.HasKey("SellingListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingList");
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingPayment", b =>
                {
                    b.Property<int>("SellingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ReceiptSn")
                        .HasColumnName("ReceiptSN")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("SellingPayment");
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingPaymentList", b =>
                {
                    b.Property<int>("SellingPaymentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<double>("SellingPaidAmount")
                        .HasColumnType("float");

                    b.Property<int>("SellingPaymentId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentListId");

                    b.HasIndex("SellingId");

                    b.HasIndex("SellingPaymentId");

                    b.ToTable("SellingPaymentList");
                });

            modelBuilder.Entity("AhmedTrading.Data.Trader", b =>
                {
                    b.Property<int>("TraderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TraderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("TraderId");

                    b.ToTable("Trader");
                });

            modelBuilder.Entity("AhmedTrading.Data.TraderSharing", b =>
                {
                    b.Property<int>("TraderSharingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsGiven")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SharePrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("([Quantity]*[UnitPrice])");

                    b.Property<int>("TraderId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("TraderSharingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TraderId");

                    b.ToTable("TraderSharing");
                });

            modelBuilder.Entity("AhmedTrading.Data.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Advance")
                        .HasColumnType("float");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("float")
                        .HasComputedColumnSql("(((([Paid]+[Advance])+[Commission])+[TotalDiscount])-([TotalAmount]+[ReturnAmount]+[OpeningDue]))");

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("OpeningDue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("0");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<double>("ReturnAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("float");

                    b.Property<string>("VendorAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("VendorCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("VendorPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("AhmedTrading.Data.VendorAdvance", b =>
                {
                    b.Property<int>("VendorAdvanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Advance")
                        .HasColumnType("float");

                    b.Property<DateTime>("AdvanceDate")
                        .HasColumnType("date");

                    b.Property<string>("AdvanceDetails")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorAdvanceId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorAdvance");
                });

            modelBuilder.Entity("AhmedTrading.Data.VendorCommission", b =>
                {
                    b.Property<int>("VendorCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("MonthDate")
                        .HasColumnType("date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorCommissionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorCommission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            ConcurrencyStamp = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            ConcurrencyStamp = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            Name = "sub-admin",
                            NormalizedName = "SUB-ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "A0456563-F978-4135-B563-97F23EA02FDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A0456563-F978-4135-B563-97F23EA02FDA",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDch3arYEB9dCAudNdsYEpVX7ryywa8f3ZIJSVUmEThAI50pLh9RyEu7NjGJccpOog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "A0456563-F978-4135-B563-97F23EA02FDA",
                            RoleId = "5A71C6C4-9488-4BCC-A680-445A34C6E721"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AhmedTrading.Data.BankDeposit", b =>
                {
                    b.HasOne("AhmedTrading.Data.BankAccount", "BankAccount")
                        .WithMany("BankDeposit")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_BankDeposit_BankAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.BankLoan", b =>
                {
                    b.HasOne("AhmedTrading.Data.BankAccount", "BankAccount")
                        .WithMany("BankLoan")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_BankLoan_BankAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.BankLoanReturn", b =>
                {
                    b.HasOne("AhmedTrading.Data.BankLoan", "BankLoan")
                        .WithMany("BankLoanReturn")
                        .HasForeignKey("BankLoanId")
                        .HasConstraintName("FK_BankLoanReturn_BankLoan")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.BankWithdrew", b =>
                {
                    b.HasOne("AhmedTrading.Data.BankAccount", "BankAccount")
                        .WithMany("BankWithdrew")
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_BankWithdrew_BankAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.CustomerPhone", b =>
                {
                    b.HasOne("AhmedTrading.Data.Customer", "Customer")
                        .WithMany("CustomerPhone")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerPhone_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.Expense", b =>
                {
                    b.HasOne("AhmedTrading.Data.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expense")
                        .HasForeignKey("ExpenseCategoryId")
                        .HasConstraintName("FK_Expense_ExpenseCategory")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("Expense")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Expense_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PageLink", b =>
                {
                    b.HasOne("AhmedTrading.Data.PageLinkCategory", "LinkCategory")
                        .WithMany("PageLink")
                        .HasForeignKey("LinkCategoryId")
                        .HasConstraintName("FK_PageLink_PageLinkCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PageLinkAssign", b =>
                {
                    b.HasOne("AhmedTrading.Data.PageLink", "Link")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("LinkId")
                        .HasConstraintName("FK_PageLinkAssign_PageLink")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PageLinkAssign_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PersonalLoan", b =>
                {
                    b.HasOne("AhmedTrading.Data.Person", "Person")
                        .WithMany("PersonalLoan")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_PersonalLoan_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("PersonalLoan")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PersonalLoan_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PersonalLoanReturn", b =>
                {
                    b.HasOne("AhmedTrading.Data.PersonalLoan", "PersonalLoan")
                        .WithMany("PersonalLoanReturn")
                        .HasForeignKey("PersonalLoanId")
                        .HasConstraintName("FK_PersonalLoanReturn_PersonalLoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.Product", b =>
                {
                    b.HasOne("AhmedTrading.Data.ProductBrand", "ProductBrand")
                        .WithMany("Product")
                        .HasForeignKey("ProductBrandId")
                        .HasConstraintName("FK_Product_ProductBrand")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.Purchase", b =>
                {
                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("Purchase")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Purchase_Registration")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Vendor", "Vendor")
                        .WithMany("Purchase")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Purchase_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchaseList", b =>
                {
                    b.HasOne("AhmedTrading.Data.Product", "Product")
                        .WithMany("PurchaseList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PurchaseList_Product")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Purchase", "Purchase")
                        .WithMany("PurchaseList")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchaseList_Purchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchasePayment", b =>
                {
                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PurchasePayment_Registration")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Vendor", "Vendor")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_PurchasePayment_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.PurchasePaymentList", b =>
                {
                    b.HasOne("AhmedTrading.Data.Purchase", "Purchase")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchasePaymentList_Purchase")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.PurchasePayment", "PurchasePayment")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchasePaymentId")
                        .HasConstraintName("FK_PurchasePaymentList_PurchasePayment")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.Selling", b =>
                {
                    b.HasOne("AhmedTrading.Data.Customer", "Customer")
                        .WithMany("Selling")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Selling_Customer");

                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("Selling")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Selling_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingList", b =>
                {
                    b.HasOne("AhmedTrading.Data.Product", "Product")
                        .WithMany("SellingList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SellingList_Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Selling", "Selling")
                        .WithMany("SellingList")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingList_Selling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingPayment", b =>
                {
                    b.HasOne("AhmedTrading.Data.Customer", "Customer")
                        .WithMany("SellingPayment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_SellingPayment_Customer");

                    b.HasOne("AhmedTrading.Data.Registration", "Registration")
                        .WithMany("SellingPayment")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_SellingPayment_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.SellingPaymentList", b =>
                {
                    b.HasOne("AhmedTrading.Data.Selling", "Selling")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingPaymentList_Selling")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.SellingPayment", "SellingPayment")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingPaymentId")
                        .HasConstraintName("FK_SellingPaymentList_SellingPayment")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.TraderSharing", b =>
                {
                    b.HasOne("AhmedTrading.Data.Product", "Product")
                        .WithMany("TraderSharing")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_TraderSharing_Product")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Trader", "Trader")
                        .WithMany("TraderSharing")
                        .HasForeignKey("TraderId")
                        .HasConstraintName("FK_TraderSharing_Trader")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.VendorAdvance", b =>
                {
                    b.HasOne("AhmedTrading.Data.Vendor", "Vendor")
                        .WithMany("VendorAdvance")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorAdvance_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("AhmedTrading.Data.VendorCommission", b =>
                {
                    b.HasOne("AhmedTrading.Data.Product", "Product")
                        .WithMany("VendorCommission")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_VendorCommission_Product")
                        .IsRequired();

                    b.HasOne("AhmedTrading.Data.Vendor", "Vendor")
                        .WithMany("VendorCommission")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorCommission_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
